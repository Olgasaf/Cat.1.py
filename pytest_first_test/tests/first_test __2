#Пример запроса и получения результатов заголовков:

   def add_new_pet(self, auth_key: json, name: str, animal_type: str, age: str, pet_photo: str) -> json:
        """Добавляет питомца с фото и возвращает статус запроса и результат в формате JSON"""
        data = MultipartEncoder(
            fields={
                'name': name,
                'animal_type': animal_type,
                'age': age,
                'pet_photo': (pet_photo, open(pet_photo, 'rb'), 'image/jpeg')
            })
        headers = {'auth_key': auth_key['key'], 'Content-Type': data.content_type}
        res = requests.post(self.base_url + 'api/pets', headers=headers, data=data)
        # добавляем заголовки:
        content = res.headers
        optional = res.request.headers
        status = res.status_code
        result = ""
        try:
            result = res.json()
        except json.decoder.JSONDecodeError:
            result = res.text
        return status, result, content, optional
        
        
   #Код для теста:
   
           def add_new_pet(self, auth_key: json, name: str, animal_type: str, age: str, pet_photo: str) -> json:
        """Добавляет питомца с фото и возвращает статус запроса и результат в формате JSON"""
        data = MultipartEncoder(
            fields={
                'name': name,
                'animal_type': animal_type,
                'age': age,
                'pet_photo': (pet_photo, open(pet_photo, 'rb'), 'image/jpeg')
            })
        headers = {'auth_key': auth_key['key'], 'Content-Type': data.content_type}
        res = requests.post(self.base_url + 'api/pets', headers=headers, data=data)
        # добавляем заголовки:
        content = res.headers
        optional = res.request.headers
        status = res.status_code
        result = ""
        try:
            result = res.json()
        except json.decoder.JSONDecodeError:
            result = res.text
        return status, result, content, optional
        
        
  #Фитчи:
#Для тестирования времени выполнения теста по отдельному запросу, добавим в функцию следующий код из библиотеки time:

start = time.monotonic_ns() # засекаем таймер начала выполнения теста...
<<< тело функции >>>
finish = time.monotonic_ns() # засекаем таймер после выполнения теста...
 time_test = (finish - start)//1000000
 print(f"Время выполнения теста: {time_test} млсек.")
assert time_test < 1000
# Время выполнения теста: 234 млсек.



Можем также проверять доп. параметры (см. код по их добавлению выше), например для теста получения ключа:
assert optional.get('email') == valid_email / password
и для теста создания питомца:
assert optional.get('auth_key') == auth_key.get('key') (отредактировано) 



Если есть какие непонятки с решением примеров в учебном модуле 21, см. здесь...
В частности, пояснения по блоку 21.4 для понимания setup / teardown:
Логика такая...
Блок Setup (выполняется вначале тест-функции (перед исполнением кода на тест)):

import pytest  # разрешает применение фикстур

@pytest.fixture()  # с помощью этой конструкции, мы преобразуем функцию "get_key" в фикстуру (для этого указываем код фикстуры над функцией)
def get_key():
    """ данная функция-фикстура выступает в качестве блока "setup" для тест-функции: "test_getAllPets", т.е. предшествует выполнению запуска самого теста! Суть этой фикстуры: залогиниться прежде, чем выполнить тест - чтобы сократить объём кода в тест-функции (иначе оптимизировать: и время выполнения (возможно), и кол-во строк кода - например, в каждой тест функции, где нужно залогиниться)"""
    # переменные email и password нужно заменить своими учетными данными:
    response = requests.post(url='https://petfriends.skillfactory.ru/login',
                             data={"email": valid_email, "pass": valid_password})
    assert response.status_code == 200, 'Запрос выполнен неуспешно'
    assert 'Cookie' in response.request.headers, 'В запросе не передан ключ авторизации'
    return response.request.headers.get('Cookie')
Тест-функция:
def test_getAllPets(get_key):
    """тест-функция принимает в аргументе уже саму фикстуру (setup), т.е. начинает запуск кода с неё! А потом уже выполняет свой код по тестированию"""
    response = requests.get(url='https://petfriends.skillfactory.ru/api/pets',
                            headers={"Cookie": get_key})
    print(len(response.json().get('pets')))
    assert response.status_code == 200, 'Запрос выполнен неуспешно'
    assert len(response.json().get('pets')) > 0, 'Количество питомцев не соответствует ожиданиям'
Блок Teardown (выполняется после исполнения теста в тест-функции):
@pytest.fixture(autouse=True)  # преобразуем функцию "time_delta" в фикстуру (для этого указываем код фикстуры над функцией)
def time_delta():
    """ данная функция-фикстура выступает в качестве блока Teardown. Суть её кода в данном случае - считывание времени выполнения теста."""
    start_time = time.time_ns()
    yield  """ спец.слово => ссылка на тест-функцию, в данном случае test_getAllPets. Т.е. данная фикстура в этом месте вызывает выполнение кода тест-функции, предварительно включив таймер (код start_time =), а после завершения теста, фикстура выключает таймер (end_time =) и выводит его на печать (print(f"\nТест шёл:...) под результатами теста."""
    end_time = time.time_ns()
    print(f"\nТест шёл: {(end_time - start_time)//1000000}мс")
    
    
    Для того чтобы фикстура вызывалась автоматически, можно указать в её параметрах autouse=True
yield - спец. слово в pytest, которое позволяет посреди фикстуры вызвать выполнение тестовой функции и продолжить после того, как тестовая функция закончит делать свои операции

